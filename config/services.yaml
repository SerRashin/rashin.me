# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
      autowire: true      # Automatically injects dependencies in your services.
      autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

      # autowiring parameters
      bind:
        lazy: true
        $storageTmpDir: '/app/var/tmp/'
        $storagePublicPath: '/app/public/storage/'
        $storagePublicUrl: '/storage/'

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  RashinMe\:
      resource: '../src/'
      exclude:
          - '../src/DependencyInjection/'
          - '../src/Entity/'
          - '../src/Kernel.php'
#          - '../src/ValueResolver'
#          - '../src/Service/DataTransferObject'

  # Controllers as services
  RashinMe\Controller\:
    resource: '../src/Controller'
    tags: ['controller.service_arguments']


  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

#  App\ValueResolver\RequestToDtoObjectResolver:
#    tags:
#      - { name: controller.argument_value_resolver }

#  dto.factory:
#    class: App\Service\DataTransferObject\DataTransferObjectFactory
#    arguments:
#      $availableAttributes:
#        - App\Service\DataTransferObject\Permissions\MapTo
#        - App\Service\DataTransferObject\Permissions\MapToArray
#      $mapperFactory: "@dto.mapper.factory"
#
#  dto.mapper.map_to_array_of:
#    class: App\Service\DataTransferObject\Mappers\MapToArrayOfMapper
#    arguments:
#      - "@dto.factory"
#  dto.mapper.map_to:
#    class: App\Service\DataTransferObject\Mappers\MapToArrayOfMapper
#    arguments:
#      - "@dto.factory"
#  dto.mapper.factory:
#    class: App\Service\DataTransferObject\Mappers\MapperFactoryStrategy
#    arguments:
#      $mappers:
#        App\Service\DataTransferObject\Permissions\MapTo: "@dto.mapper.map_to"
#        App\Service\DataTransferObject\Permissions\MapToArray: "@dto.mapper.map_to_array_of"
#
#  App\Service\DataTransferObject\DataTransferObjectFactoryInterface:
#    alias: "dto.factory"
#
#  App\Service\DataTransferObject\Mappers\MapperFactoryInterface:
#    alias: "dto.mapper.factory"


